// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNet.Abstractions;
using Xunit;

namespace Microsoft.AspNet.Routing.Template.Tests
{
    public class TemplateMatcherTests
    {
        [Fact]
        public void MatchSingleRoute()
        {
            // Arrange
            var matcher = CreateMatcher("{controller}/{action}/{id}");

            // Act
            var match = matcher.Match("~/Bank/DoAction/123", null);

            // Assert
            Assert.NotNull(match);
            Assert.Equal("Bank", match["controller"]);
            Assert.Equal("DoAction", match["action"]);
            Assert.Equal("123", match["id"]);
        }

        [Fact]
        public void NoMatchSingleRoute()
        {
            // Arrange
            var matcher = CreateMatcher("{controller}/{action}/{id}");

            // Act
            var match = matcher.Match("~/Bank/DoAction", null);

            // Assert
            Assert.Null(match);
        }

        [Fact]
        public void MatchSingleRouteWithDefaults()
        {
            // Arrange
            var matcher = CreateMatcher("{controller}/{action}/{id}");

            // Act
            var rd = matcher.Match("~/Bank/DoAction", new RouteValueDictionary(new { id = "default id" }));

            // Assert
            Assert.Equal("Bank", rd["controller"]);
            Assert.Equal("DoAction", rd["action"]);
            Assert.Equal("default id", rd["id"]);
        }

        [Fact]
        public void NoMatchSingleRouteWithDefaults()
        {
            // Arrange
            var matcher = CreateMatcher("{controller}/{action}/{id}");

            // Act
            var rd = matcher.Match("~/Bank", new RouteValueDictionary(new { id = "default id" }));

            // Assert
            Assert.Null(rd);
        }

        [Fact]
        public void MatchRouteWithLiterals()
        {
            // Arrange
            var matcher = CreateMatcher("moo/{p1}/bar/{p2}");

            // Act
            var rd = matcher.Match("~/moo/111/bar/222", new RouteValueDictionary(new { p2 = "default p2" }));

            // Assert
            Assert.Equal("111", rd["p1"]);
            Assert.Equal("222", rd["p2"]);
        }

        [Fact]
        public void MatchRouteWithLiteralsAndDefaults()
        {
            // Arrange
            var matcher = CreateMatcher("moo/{p1}/bar/{p2}");

            // Act
            var rd = matcher.Match("~/moo/111/bar/", new RouteValueDictionary(new { p2 = "default p2" }));

            // Assert
            Assert.Equal("111", rd["p1"]);
            Assert.Equal("default p2", rd["p2"]);
        }

        [Fact]
        public void MatchRouteWithOnlyLiterals()
        {
            // Arrange
            var matcher = CreateMatcher("moo/bar");

            // Act
            var rd = matcher.Match("~/moo/bar", null);

            // Assert
            Assert.NotNull(rd);
            Assert.Equal<int>(0, rd.Values.Count);
        }

        [Fact]
        public void NoMatchRouteWithOnlyLiterals()
        {
            // Arrange
            var matcher = CreateMatcher("moo/bars");

            // Act
            var rd = matcher.Match("~/moo/bar", null);

            // Assert
            Assert.Null(rd);
        }

        [Fact]
        public void MatchRouteWithExtraSeparators()
        {
            // Arrange
            var matcher = CreateMatcher("moo/bar");

            // Act
            var rd = matcher.Match("~/moo/bar/", null);

            // Assert
            Assert.NotNull(rd);
            Assert.Equal<int>(0, rd.Values.Count);
        }

        [Fact]
        public void MatchRouteUrlWithExtraSeparators()
        {
            // Arrange
            var matcher = CreateMatcher("moo/bar/";

            // Act
            var rd = matcher.Match("~/moo/bar", null));

            // Assert
            Assert.NotNull(rd);
            Assert.Equal<int>(0, rd.Values.Count);
        }

        [Fact]
        public void MatchRouteUrlWithParametersAndExtraSeparators()
        {
            // Arrange
            var matcher = CreateMatcher("{p1}/{p2}/");

            // Act
            var rd = matcher.Match("~/moo/bar", null);

            // Assert
            Assert.NotNull(rd);
            Assert.Equal("moo", rd["p1"]);
            Assert.Equal("bar", rd["p2"]);
        }

        [Fact]
        public void NoMatchRouteUrlWithDifferentLiterals()
        {
            // Arrange
            HttpContext context = GetHttpContext("~/moo/bar/boo");
            var matcher = CreateMatcher("{p1}/{p2}/baz", null);

            // Act
            var rd = matcher.Match(new RouteContext(context));

            // Assert
            Assert.Null(rd);
        }

        [Fact]
        public void NoMatchLongerUrl()
        {
            // Arrange
            HttpContext context = GetHttpContext("~/moo/bar");
            var matcher = CreateMatcher("{p1}", null);

            // Act
            var rd = matcher.Match(new RouteContext(context));

            // Assert
            Assert.Null(rd);
        }

        [Fact]
        public void MatchSimpleFilename()
        {
            // Arrange
            HttpContext context = GetHttpContext("~/default.aspx");
            var matcher = CreateMatcher("DEFAULT.ASPX", null);

            // Act
            var rd = matcher.Match(new RouteContext(context));

            // Assert
            Assert.NotNull(rd);
        }

        private void VerifyRouteMatchesWithContext(string route, string requestUrl)
        {
            HttpContext context = GetHttpContext(requestUrl);
            var matcher = CreateMatcher(route, null);

            // Act
            var rd = matcher.Match(new RouteContext(context));

            // Assert
            Assert.NotNull(rd);
        }

        [Fact]
        public void MatchEvilRoute()
        {
            VerifyRouteMatchesWithContext("{prefix}x{suffix}", "~/xxxxxxxxxx");
            VerifyRouteMatchesWithContext("{prefix}xyz{suffix}", "~/xxxxyzxyzxxxxxxyz");
            VerifyRouteMatchesWithContext("{prefix}xyz{suffix}", "~/abcxxxxyzxyzxxxxxxyzxx");
            VerifyRouteMatchesWithContext("{prefix}xyz{suffix}", "~/xyzxyzxyzxyzxyz");
            VerifyRouteMatchesWithContext("{prefix}xyz{suffix}", "~/xyzxyzxyzxyzxyz1");
            VerifyRouteMatchesWithContext("{prefix}xyz{suffix}", "~/xyzxyzxyz");
            VerifyRouteMatchesWithContext("{prefix}aa{suffix}", "~/aaaaa");
            VerifyRouteMatchesWithContext("{prefix}aaa{suffix}", "~/aaaaa");
        }

        [Fact]
        public void MatchRouteWithExtraDefaultValues()
        {
            // Arrange
            HttpContext context = GetHttpContext("~/v1");
            var matcher = CreateMatcher("{p1}/{p2}", new RouteValueDictionary(new { p2 = (string)null, foo = "bar" }));

            // Act
            var rd = matcher.Match(new RouteContext(context));

            // Assert
            Assert.NotNull(rd);
            Assert.Equal<int>(3, rd.Values.Count);
            Assert.Equal("v1", rd.Values["p1"]);
            Assert.Null(rd.Values["p2"]);
            Assert.Equal("bar", rd.Values["foo"]);
        }

        [Fact]
        public void MatchPrettyRouteWithExtraDefaultValues()
        {
            // Arrange
            HttpContext context = GetHttpContext("~/date/2007/08");
            var matcher = CreateMatcher(
                "date/{y}/{m}/{d}",
                new RouteValueDictionary(new { controller = "blog", action = "showpost", m = (string)null, d = (string)null }));

            // Act
            var rd = matcher.Match(new RouteContext(context));

            // Assert
            Assert.NotNull(rd);
            Assert.Equal<int>(5, rd.Values.Count);
            Assert.Equal("blog", rd.Values["controller"]);
            Assert.Equal("showpost", rd.Values["action"]);
            Assert.Equal("2007", rd.Values["y"]);
            Assert.Equal("08", rd.Values["m"]);
            Assert.Null(rd.Values["d"]);
        }

        [Fact]
        public void GetRouteDataWithMultiSegmentParamsOnBothEndsMatches()
        {
            RunTest(
                CreateMatcher("language/{lang}-{region}"),
                "language/en-US",
                new RouteValueDictionary(new { lang = "en", region = "US" }));
        }

        [Fact]
        public void GetRouteDataWithMultiSegmentParamsOnLeftEndMatches()
        {
            RunTest(
                CreateMatcher("language/{lang}-{region}a"),
                "language/en-USa",
                new RouteValueDictionary(new { lang = "en", region = "US" }));
        }

        [Fact]
        public void GetRouteDataWithMultiSegmentParamsOnRightEndMatches()
        {
            RunTest(
                CreateMatcher("language/a{lang}-{region}", null),
                "language/aen-US",
                new RouteValueDictionary(new { lang = "en", region = "US" }));
        }

        [Fact]
        public void GetRouteDataWithMultiSegmentParamsOnNeitherEndMatches()
        {
            RunTest(
                CreateMatcher("language/a{lang}-{region}a", null),
                "language/aen-USa",
                new RouteValueDictionary(new { lang = "en", region = "US" }));
        }

        [Fact]
        public void GetRouteDataWithMultiSegmentParamsOnNeitherEndDoesNotMatch()
        {
            RunTest(
                CreateMatcher("language/a{lang}-{region}a", null),
                "language/a-USa",
                null);
        }

        [Fact]
        public void GetRouteDataWithMultiSegmentParamsOnNeitherEndDoesNotMatch2()
        {
            RunTest(
                CreateMatcher("language/a{lang}-{region}a", null),
                "language/aen-a",
                null);
        }

        [Fact]
        public void GetRouteDataWithSimpleMultiSegmentParamsOnBothEndsMatches()
        {
            RunTest(
                CreateMatcher("language/{lang}", null),
                "language/en",
                new RouteValueDictionary(new { lang = "en" }));
        }

        [Fact]
        public void GetRouteDataWithSimpleMultiSegmentParamsOnBothEndsTrailingSlashDoesNotMatch()
        {
            RunTest(
                CreateMatcher("language/{lang}", null),
                "language/",
                null);
        }

        [Fact]
        public void GetRouteDataWithSimpleMultiSegmentParamsOnBothEndsDoesNotMatch()
        {
            RunTest(
                CreateMatcher("language/{lang}", null),
                "language",
                null);
        }

        [Fact]
        public void GetRouteDataWithSimpleMultiSegmentParamsOnLeftEndMatches()
        {
            RunTest(
                CreateMatcher("language/{lang}-", null),
                "language/en-",
                new RouteValueDictionary(new { lang = "en" }));
        }

        [Fact]
        public void GetRouteDataWithSimpleMultiSegmentParamsOnRightEndMatches()
        {
            RunTest(
                CreateMatcher("language/a{lang}", null),
                "language/aen",
                new RouteValueDictionary(new { lang = "en" }));
        }

        [Fact]
        public void GetRouteDataWithSimpleMultiSegmentParamsOnNeitherEndMatches()
        {
            RunTest(
                CreateMatcher("language/a{lang}a", null),
                "language/aena",
                new RouteValueDictionary(new { lang = "en" }));
        }

        [Fact]
        public void GetRouteDataWithMultiSegmentStandardMvcRouteMatches()
        {
            RunTest(
                CreateMatcher("{controller}.mvc/{action}/{id}", new RouteValueDictionary(new { action = "Index", id = (string)null })),
                "home.mvc/index",
                new RouteValueDictionary(new { controller = "home", action = "index", id = (string)null }));
        }

        [Fact]
        public void GetRouteDataWithMultiSegmentParamsOnBothEndsWithDefaultValuesMatches()
        {
            RunTest(
                CreateMatcher("language/{lang}-{region}", new RouteValueDictionary(new { lang = "xx", region = "yy" })),
                "language/-", 
                null);
        }

        [Fact]
        public void GetRouteDataWithUrlWithMultiSegmentWithRepeatedDots()
        {
            RunTest(
                CreateMatcher("{Controller}..mvc/{id}/{Param1}", null),
                "Home..mvc/123/p1",
                new RouteValueDictionary(new { Controller = "Home", id = "123", Param1 = "p1" }));
        }

        [Fact]
        public void GetRouteDataWithUrlWithTwoRepeatedDots()
        {
            RunTest(
                CreateMatcher("{Controller}.mvc/../{action}", null),
                "Home.mvc/../index",
                new RouteValueDictionary(new { Controller = "Home", action = "index" }));
        }

        [Fact]
        public void GetRouteDataWithUrlWithThreeRepeatedDots()
        {
            RunTest(
                CreateMatcher("{Controller}.mvc/.../{action}", null),
                "Home.mvc/.../index",
                new RouteValueDictionary(new { Controller = "Home", action = "index" }));
        }

        [Fact]
        public void GetRouteDataWithUrlWithManyRepeatedDots()
        {
            RunTest(
                CreateMatcher("{Controller}.mvc/../../../{action}", null),
                "Home.mvc/../../../index",
                new RouteValueDictionary(new { Controller = "Home", action = "index" }));
        }

        [Fact]
        public void GetRouteDataWithUrlWithExclamationPoint()
        {
            RunTest(
                CreateMatcher("{Controller}.mvc!/{action}", null),
                "Home.mvc!/index",
                new RouteValueDictionary(new { Controller = "Home", action = "index" }));
        }

        [Fact]
        public void GetRouteDataWithUrlWithStartingDotDotSlash()
        {
            RunTest(
                CreateMatcher("../{Controller}.mvc", null),
                "../Home.mvc",
                new RouteValueDictionary(new { Controller = "Home" }));
        }

        [Fact]
        public void GetRouteDataWithUrlWithStartingBackslash()
        {
            RunTest(
                CreateMatcher(@"\{Controller}.mvc", null),
                @"\Home.mvc",
                new RouteValueDictionary(new { Controller = "Home" }));
        }

        [Fact]
        public void GetRouteDataWithUrlWithBackslashSeparators()
        {
            RunTest(
                CreateMatcher(@"{Controller}.mvc\{id}\{Param1}", null),
                @"Home.mvc\123\p1",
                new RouteValueDictionary(new { Controller = "Home", id = "123", Param1 = "p1" }));
        }

        [Fact]
        public void GetRouteDataWithUrlWithParenthesesLiterals()
        {
            RunTest(
                CreateMatcher(@"(Controller).mvc", null),
                @"(Controller).mvc",
                new RouteValueDictionary());
        }

        [Fact]
        public void GetRouteDataWithUrlWithTrailingSlashSpace()
        {
            RunTest(
                CreateMatcher(@"Controller.mvc/ ", null),
                @"Controller.mvc/ ",
                new RouteValueDictionary());
        }

        [Fact]
        public void GetRouteDataWithUrlWithTrailingSpace()
        {
            RunTest(
                CreateMatcher(@"Controller.mvc ", null),
                @"Controller.mvc ",
                new RouteValueDictionary());
        }

        [Fact]
        public void GetRouteDataWithCatchAllCapturesDots()
        {
            // DevDiv Bugs 189892: UrlRouting: Catch all parameter cannot capture url segments that contain the "."
            RunTest(
                CreateMatcher(
                    "Home/ShowPilot/{missionId}/{*name}",
                    new RouteValueDictionary(new
                    {
                        controller = "Home",
                        action = "ShowPilot",
                        missionId = (string)null,
                        name = (string)null
                    })),
                "Home/ShowPilot/777/12345./foobar",
                new RouteValueDictionary(new { controller = "Home", action = "ShowPilot", missionId = "777", name = "12345./foobar" }));
        }

        [Fact]
        public void RouteWithCatchAllClauseCapturesManySlashes()
        {
            // Arrange
            HttpContext context = GetHttpContext("~/v1/v2/v3");
            var matcher = CreateMatcher("{p1}/{*p2}", null);

            // Act
            var rd = matcher.Match(new RouteContext(context));

            // Assert
            Assert.NotNull(rd);
            Assert.Equal<int>(2, rd.Values.Count);
            Assert.Equal("v1", rd.Values["p1"]);
            Assert.Equal("v2/v3", rd.Values["p2"]);
        }

        [Fact]
        public void RouteWithCatchAllClauseCapturesTrailingSlash()
        {
            // Arrange
            HttpContext context = GetHttpContext("~/v1/");
            var matcher = CreateMatcher("{p1}/{*p2}", null);

            // Act
            var rd = matcher.Match(new RouteContext(context));

            // Assert
            Assert.NotNull(rd);
            Assert.Equal<int>(2, rd.Values.Count);
            Assert.Equal("v1", rd.Values["p1"]);
            Assert.Null(rd.Values["p2"]);
        }

        [Fact]
        public void RouteWithCatchAllClauseCapturesEmptyContent()
        {
            // Arrange
            HttpContext context = GetHttpContext("~/v1");
            var matcher = CreateMatcher("{p1}/{*p2}", null);

            // Act
            var rd = matcher.Match(new RouteContext(context));

            // Assert
            Assert.NotNull(rd);
            Assert.Equal<int>(2, rd.Values.Count);
            Assert.Equal("v1", rd.Values["p1"]);
            Assert.Null(rd.Values["p2"]);
        }

        [Fact]
        public void RouteWithCatchAllClauseUsesDefaultValueForEmptyContent()
        {
            // Arrange
            HttpContext context = GetHttpContext("~/v1");
            var matcher = CreateMatcher("{p1}/{*p2}", new RouteValueDictionary(new { p2 = "catchall" }));

            // Act
            var rd = matcher.Match(new RouteContext(context));

            // Assert
            Assert.NotNull(rd);
            Assert.Equal<int>(2, rd.Values.Count);
            Assert.Equal("v1", rd.Values["p1"]);
            Assert.Equal("catchall", rd.Values["p2"]);
        }

        [Fact]
        public void RouteWithCatchAllClauseIgnoresDefaultValueForNonEmptyContent()
        {
            // Arrange
            HttpContext context = GetHttpContext("~/v1/hello/whatever");
            var matcher = CreateMatcher("{p1}/{*p2}", new RouteValueDictionary(new { p2 = "catchall" }));

            // Act
            var rd = matcher.Match(new RouteContext(context));

            // Assert
            Assert.NotNull(rd);
            Assert.Equal<int>(2, rd.Values.Count);
            Assert.Equal("v1", rd.Values["p1"]);
            Assert.Equal("hello/whatever", rd.Values["p2"]);
        }

        [Fact]
        public void GetRouteDataDoesNotMatchOnlyLeftLiteralMatch()
        {
            var matcher = CreateMatcher("foo", null);

            // DevDiv Bugs 191180: UrlRouting: Wrong route getting matched if a url segment is a substring of the requested url
            RunTest(
                r,
                "fooBAR",
                null);
        }

        [Fact]
        public void GetRouteDataDoesNotMatchOnlyRightLiteralMatch()
        {
            var matcher = CreateMatcher("foo", null);

            // DevDiv Bugs 191180: UrlRouting: Wrong route getting matched if a url segment is a substring of the requested url
            RunTest(
                r,
                "BARfoo",
                null);
        }

        [Fact]
        public void GetRouteDataDoesNotMatchMiddleLiteralMatch()
        {
            var matcher = CreateMatcher("foo", null);

            // DevDiv Bugs 191180: UrlRouting: Wrong route getting matched if a url segment is a substring of the requested url
            RunTest(
                r,
                "BARfooBAR",
                null);
        }

        [Fact]
        public void GetRouteDataDoesMatchesExactLiteralMatch()
        {
            var matcher = CreateMatcher("foo", null);

            // DevDiv Bugs 191180: UrlRouting: Wrong route getting matched if a url segment is a substring of the requested url
            RunTest(
                r,
                "foo",
                new RouteValueDictionary());
        }

        [Fact]
        public void GetRouteDataWithWeirdParameterNames()
        {
            var matcher = CreateMatcher(
                "foo/{ }/{.!$%}/{dynamic.data}/{op.tional}",
                new RouteValueDictionary() { { " ", "not a space" }, { "op.tional", "default value" }, { "ran!dom", "va@lue" } });

            RunTest(
                r,
                "foo/space/weird/orderid",
                new RouteValueDictionary() { { " ", "space" }, { ".!$%", "weird" }, { "dynamic.data", "orderid" }, { "op.tional", "default value" }, { "ran!dom", "va@lue" } });
        }

        [Fact]
        public void GetRouteDataDoesNotMatchRouteWithLiteralSeparatorDefaultsButNoValue()
        {
            RunTest(
                CreateMatcher("{controller}/{language}-{locale}", new RouteValueDictionary(new { language = "en", locale = "US" })),
                "foo",
                null);
        }

        [Fact]
        public void GetRouteDataDoesNotMatchesRouteWithLiteralSeparatorDefaultsAndLeftValue()
        {
            RunTest(
                CreateMatcher("{controller}/{language}-{locale}", new RouteValueDictionary(new { language = "en", locale = "US" })),
                "foo/xx-",
                null);
        }

        [Fact]
        public void GetRouteDataDoesNotMatchesRouteWithLiteralSeparatorDefaultsAndRightValue()
        {
            RunTest(
                "{controller}/{language}-{locale}",
                "foo/-yy",
                new RouteValueDictionary(new { language = "en", locale = "US" }))
                null);
        }

        [Fact]
        public void GetRouteDataMatchesRouteWithLiteralSeparatorDefaultsAndValue()
        {
            RunTest(
                "{controller}/{language}-{locale}",
                "foo/xx-yy",
                new RouteValueDictionary(new { language = "en", locale = "US" }),
                new RouteValueDictionary { { "language", "xx" }, { "locale", "yy" }, { "controller", "foo" } });
        }

        [Fact]
        public void MatchSetsOptionalParameter()
        {
            // Arrange
            var route = CreateMatcher("{controller}/{action?}");
            var url = "Home/Index";

            // Act
            var match = route.Match(url, null);

            // Assert
            Assert.NotNull(match);
            Assert.Equal(2, match.Values.Count);
            Assert.Equal("Home", match["controller"]);
            Assert.Equal("Index", match["action"]);
        }

        [Fact]
        public void MatchDoesNotSetOptionalParameter()
        {
            // Arrange
            var route = CreateMatcher("{controller}/{action?}");
            var url = "Home";

            // Act
            var match = route.Match(url, null);

            // Assert
            Assert.NotNull(match);
            Assert.Equal(1, match.Values.Count);
            Assert.Equal("Home", match["controller"]);
            Assert.False(match.ContainsKey("action"));
        }

        [Fact]
        public void MatchMultipleOptionalParameters()
        {
            // Arrange
            var route = CreateMatcher("{controller}/{action?}/{id?}");
            var url = "Home/Index";

            // Act
            var match = route.Match(url, null);

            // Assert
            Assert.NotNull(match);
            Assert.Equal(2, match.Values.Count);
            Assert.Equal("Home", match["controller"]);
            Assert.Equal("Index", match["action"]);
            Assert.False(match.ContainsKey("id"));
        }

        private TemplateMatcher CreateMatcher(string template)
        {
            return new TemplateMatcher(TemplateParser.Parse(template));
        }

        private static void RunTest(string template, string path, IDictionary<string, object> defaults, IDictionary<string, object> expected)
        {
            // Arrange
            var matcher = new TemplateMatcher(TemplateParser.Parse(template));

            // Act
            var match = matcher.Match(path, defaults);

            // Assert
            if (expected == null)
            {
                Assert.Null(match);
            }
            else
            {
                Assert.NotNull(match);
                Assert.Equal(expected.Count, match.Values.Count);
                foreach (string key in match.Keys)
                {
                    Assert.Equal(expected[key], match[key]);
                }
            }
        }
    }
}
